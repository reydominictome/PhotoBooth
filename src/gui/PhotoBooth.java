/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import java.awt.RenderingHints;
import java.awt.Graphics2D;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File; 
import java.io.IOException; 
import java.awt.image.BufferedImage; 
import javax.imageio.ImageIO; 
import javax.swing.JFileChooser;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.highgui.HighGui;
import org.opencv.videoio.VideoCapture;
import org.opencv.imgcodecs.*;
import java.io.*;
/**
 *
 * @author Rey
 */
public class PhotoBooth extends javax.swing.JFrame {
    private final String EVENT_NAME = "Robotics_Cup_";
    private final String SUFFIX = ".jpg";
    private int imageNo = 1;
    private DaemonThread myThread = null;
    int count = 0;
    VideoCapture webSource = null;

    Mat frame = new Mat();
    MatOfByte mem = new MatOfByte();
    class DaemonThread implements Runnable
    {
    protected volatile boolean runnable = false;

    @Override
    public  void run()
    {
        synchronized(this)
        {
            while(runnable)
            {
                if(webSource.grab())
                {
		    	try
                        {
                            webSource.retrieve(frame);
                            HighGui.toBufferedImage(frame);
			    Imgcodecs.imencode(".bmp", frame, mem);
			    Image im = ImageIO.read(new ByteArrayInputStream(mem.toArray()));
                            
			    BufferedImage buff = (BufferedImage) im;
                            BufferedImage a = ImageIO.read(new File("Frames/1.png"));
                            BufferedImage b = ImageIO.read(new File("Frames/2.png"));
                            BufferedImage c = ImageIO.read(new File("Frames/3.png"));
                            BufferedImage d = ImageIO.read(new File("Frames/4.png"));
                            
                            Graphics aa = Filter1.getGraphics();
                            Graphics bb = Filter2.getGraphics();
                            Graphics cc = Filter3.getGraphics();
                            Graphics dd = Filter4.getGraphics();
			    Graphics g = CameraPanel.getGraphics();

			    if (g.drawImage(buff, 0, 0, getWidth(), getHeight()  -150, 0, 0, buff.getWidth() + 250, 
                                    buff.getHeight() + 250, null))
                                
                            if (aa.drawImage(buff, 0, 0, 302, 202, Filter1) && aa.drawImage(a, 0, 0, 302, 202, Filter1))
                                
                            if (bb.drawImage(buff, 0, 0, 302, 202, Filter2) && bb.drawImage(b, 0, 0, 302, 202, Filter2))
                                
                            if (cc.drawImage(buff, 0, 0, 302, 202, Filter3) && cc.drawImage(c, 0, 0, 302, 202, Filter3))
                                
                            if (dd.drawImage(buff, 0, 0, 302, 202, Filter4) && dd.drawImage(d, 0, 0, 302, 202, Filter4))
			    
			    if(runnable == false)
                            {
			    	System.out.println("Going to wait()");
			    	this.wait();
			    }
			 }
			 catch(Exception ex)
                         {
			    System.out.println("Error");
                         }
                }
            }
        }
     }
    }
   
    public PhotoBooth() {
        initComponents();
        takeSnapshot.setEnabled(false);
        setExtendedState(MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CameraPanel = new javax.swing.JPanel();
        Filter1 = new javax.swing.JPanel();
        Filter2 = new javax.swing.JPanel();
        Filter3 = new javax.swing.JPanel();
        Filter4 = new javax.swing.JPanel();
        Start = new java.awt.Button();
        takeSnapshot = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PhotoBooth");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(2147483647, 2147483647));

        CameraPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 102, 102)));

        javax.swing.GroupLayout CameraPanelLayout = new javax.swing.GroupLayout(CameraPanel);
        CameraPanel.setLayout(CameraPanelLayout);
        CameraPanelLayout.setHorizontalGroup(
            CameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 920, Short.MAX_VALUE)
        );
        CameraPanelLayout.setVerticalGroup(
            CameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 384, Short.MAX_VALUE)
        );

        Filter1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout Filter1Layout = new javax.swing.GroupLayout(Filter1);
        Filter1.setLayout(Filter1Layout);
        Filter1Layout.setHorizontalGroup(
            Filter1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        Filter1Layout.setVerticalGroup(
            Filter1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        Filter2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout Filter2Layout = new javax.swing.GroupLayout(Filter2);
        Filter2.setLayout(Filter2Layout);
        Filter2Layout.setHorizontalGroup(
            Filter2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        Filter2Layout.setVerticalGroup(
            Filter2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        Filter3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout Filter3Layout = new javax.swing.GroupLayout(Filter3);
        Filter3.setLayout(Filter3Layout);
        Filter3Layout.setHorizontalGroup(
            Filter3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        Filter3Layout.setVerticalGroup(
            Filter3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        Filter4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout Filter4Layout = new javax.swing.GroupLayout(Filter4);
        Filter4.setLayout(Filter4Layout);
        Filter4Layout.setHorizontalGroup(
            Filter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        Filter4Layout.setVerticalGroup(
            Filter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        Start.setActionCommand("Start");
        Start.setLabel("Start");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        takeSnapshot.setLabel("Take Snapshot");
        takeSnapshot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeSnapshotActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(225, Short.MAX_VALUE)
                .addComponent(Filter1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Filter3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Filter2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Filter4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(CameraPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Start, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(takeSnapshot, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(CameraPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(Start, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(takeSnapshot, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Filter2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Filter3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Filter1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Filter4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(282, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
        webSource =new VideoCapture(0);
        myThread = new DaemonThread();
            Thread t = new Thread(myThread);
            t.setDaemon(true);
            myThread.runnable = true;
            t.start();
            Start.setEnabled(false);  //start button
            takeSnapshot.setEnabled(true);
    }//GEN-LAST:event_StartActionPerformed

    private void takeSnapshotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeSnapshotActionPerformed
        // TODO add your handling code here:
        myThread.runnable = false;
        webSource.release();
        Start.setEnabled(true);
        takeSnapshot.setEnabled(false);
        try{
            File file = new File(EVENT_NAME+count+SUFFIX);
            Imgcodecs.imwrite(file.getPath(), frame);
            
            saveImages();
            count++;
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_takeSnapshotActionPerformed

    public void saveImages(){
        try{
            BufferedImage image = ImageIO.read(new File(EVENT_NAME+count+SUFFIX));
            BufferedImage a = ImageIO.read(new File("Frames/1.png"));
            BufferedImage overlayed = overlay(a, image);
            writeImage(overlayed, EVENT_NAME+count+"FRAME1"+SUFFIX, "jpg");
            
            BufferedImage image2 = ImageIO.read(new File(EVENT_NAME+count+SUFFIX));
            BufferedImage b = ImageIO.read(new File("Frames/2.png"));
            BufferedImage overlayed1 = overlay(b, image2);
            writeImage(overlayed1, EVENT_NAME+count+"FRAME2"+SUFFIX, "jpg");
            
            BufferedImage image3 = ImageIO.read(new File(EVENT_NAME+count+SUFFIX));
            BufferedImage c = ImageIO.read(new File("Frames/3.png"));
            BufferedImage overlayed2 = overlay(c, image3);
            writeImage(overlayed2, EVENT_NAME+count+"FRAME3"+SUFFIX, "jpg");
            
            BufferedImage image4 = ImageIO.read(new File(EVENT_NAME+count+SUFFIX));
            BufferedImage d = ImageIO.read(new File("Frames/4.png"));
            BufferedImage overlayed3 = overlay(d, image4);
            writeImage(overlayed3, EVENT_NAME+count+"FRAME4"+SUFFIX, "jpg");
            
            
        }catch(Exception e){
            System.out.println("DAMN");
        }
    }
    
   public BufferedImage overlay(BufferedImage fore, BufferedImage back){
       Graphics2D g = back.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
       g.drawImage(back, 0, 0, null);
       g.drawImage(fore, 0, 0, back.getWidth(), back.getHeight(), null);
       g.dispose();
       return back;
   }
   
   public static void writeImage(BufferedImage img, String fileLocation,
            String extension) {
        try {
            BufferedImage bi = img;
            File outputfile = new File(fileLocation);
            ImageIO.write(bi, extension, outputfile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
   
    
    public void toGreyScale(File file){
        try{
            BufferedImage img = ImageIO.read(file);
            int width = img.getWidth(); 
            int height = img.getHeight(); 
        // convert to greyscale 
            for (int y = 0; y < height; y++) 
            { 
                for (int x = 0; x < width; x++) 
                { 
                    // Here (x,y)denotes the coordinate of image  
                    // for modifying the pixel value. 
                    int p = img.getRGB(x,y); 

                    int a = (p>>24)&0xff; 
                    int r = (p>>16)&0xff; 
                    int g = (p>>8)&0xff; 
                    int b = p&0xff; 

                    // calculate average 
                    int avg = (r+g+b)/3; 
                      // replace RGB value with avg 
                    p = (a<<24) | (avg<<16) | (avg<<8) | avg; 

                    img.setRGB(x, y, p); 
                }
            }
            
            try{ 
                File f = new File(EVENT_NAME+count+"_GreyScale"+SUFFIX);
                ImageIO.write(img, "jpg", f);
            }catch(IOException e){ 
                System.out.println(e); 
            }
            
        }catch(Exception e){
            System.out.println(e);
        }
        
        try{
            BufferedImage img = ImageIO.read(new File(EVENT_NAME+count+"_GreyScale"+SUFFIX));
            Graphics g = Filter1.getGraphics();   
            g.drawImage(img, 0, 0, 302, 202, Filter1);
        }catch(Exception e){
            System.out.println(e);
        }
    }
    
    public void toSepia(File file){
        try{
            BufferedImage img = ImageIO.read(file);
            int width = img.getWidth(); 
            int height = img.getHeight(); 
            //convert to sepia 
        for(int y = 0; y < height; y++) 
        { 
            for(int x = 0; x < width; x++) 
            { 
                int p = img.getRGB(x,y); 
  
                int a = (p>>24)&0xff; 
                int R = (p>>16)&0xff; 
                int G = (p>>8)&0xff; 
                int B = p&0xff; 
  
                //calculate newRed, newGreen, newBlue 
                int newRed = (int)(0.393*R + 0.769*G + 0.189*B); 
                int newGreen = (int)(0.349*R + 0.686*G + 0.168*B); 
                int newBlue = (int)(0.272*R + 0.534*G + 0.131*B); 
  
                //check condition 
                if (newRed > 255) 
                    R = 255; 
                else
                    R = newRed; 
  
                if (newGreen > 255) 
                    G = 255; 
                else
                    G = newGreen; 
  
                if (newBlue > 255) 
                    B = 255; 
                else
                    B = newBlue; 
  
                //set new RGB value 
                p = (a<<24) | (R<<16) | (G<<8) | B; 
  
                img.setRGB(x, y, p); 
            } 
        } 

            try{ 
                File f = new File(EVENT_NAME+count+"_Sepia"+SUFFIX);
                ImageIO.write(img, "jpg", f);
            }catch(IOException e){ 
                System.out.println(e); 
            }

        }catch(Exception e){
            System.out.println(e);
        }

        try{
            BufferedImage img = ImageIO.read(new File(EVENT_NAME+count+"_Sepia"+SUFFIX));
            Graphics g = Filter2.getGraphics();   
            g.drawImage(img, 0, 0, 302, 202, Filter2);
        }catch(Exception e){
            System.out.println(e);
        }
    }
    
    public void toNegative(File file){
        try{
            BufferedImage img = ImageIO.read(file);
            int width = img.getWidth(); 
            int height = img.getHeight(); 
        // Convert to negative 
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                int p = img.getRGB(x,y); 
                int a = (p>>24)&0xff; 
                int r = (p>>16)&0xff; 
                int g = (p>>8)&0xff; 
                int b = p&0xff; 
  
                //subtract RGB from 255 
                r = 255 - r; 
                g = 255 - g; 
                b = 255 - b; 
  
                //set new RGB value 
                p = (a<<24) | (r<<16) | (g<<8) | b; 
                img.setRGB(x, y, p); 
            } 
        } 

            try{ 
                File f = new File(EVENT_NAME+count+"_Negative"+SUFFIX);
                ImageIO.write(img, "jpg", f);
            }catch(IOException e){ 
                System.out.println(e); 
            }

        }catch(Exception e){
            System.out.println(e);
        }

        try{
            BufferedImage img = ImageIO.read(new File(EVENT_NAME+count+"_Negative"+SUFFIX));
            Graphics g = Filter3.getGraphics();   
            g.drawImage(img, 0, 0, 302, 202, Filter3);
        }catch(Exception e){
            System.out.println(e);
        }
    }
    
    public void toColorImage(File file){
        try{
            BufferedImage img = ImageIO.read(file);
            int width = img.getWidth(); 
            int height = img.getHeight(); 
        // convert to red image 
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                int p = img.getRGB(x,y); 
  
                int a = (p>>24)&0xff; 
                int r = (p>>16)&0xff; 
  
                // set new RGB 
                // keeping the r value same as in original 
                // image and setting g and b as 0. 
                p = (a<<24) | (r<<16) | (0<<8) | 0; 
  
                img.setRGB(x, y, p); 
            } 
        } 

            try{ 
                File f = new File(EVENT_NAME+count+"_ColorImage"+SUFFIX);
                ImageIO.write(img, "jpg", f);
            }catch(IOException e){ 
                System.out.println(e); 
            }

        }catch(Exception e){
            System.out.println(e);
        }

        try{
            BufferedImage img = ImageIO.read(new File(EVENT_NAME+count+"_ColorImage"+SUFFIX));
            Graphics g = Filter4.getGraphics();   
            g.drawImage(img, 0, 0, 302, 202, Filter4);
        }catch(Exception e){
            System.out.println(e);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PhotoBooth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PhotoBooth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PhotoBooth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PhotoBooth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PhotoBooth().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CameraPanel;
    private javax.swing.JPanel Filter1;
    private javax.swing.JPanel Filter2;
    private javax.swing.JPanel Filter3;
    private javax.swing.JPanel Filter4;
    private java.awt.Button Start;
    private java.awt.Button takeSnapshot;
    // End of variables declaration//GEN-END:variables
}
